{"/home/travis/build/npmtest/node-npmtest-license-checker/test.js":"/* istanbul instrument in package npmtest_license_checker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-license-checker/lib.npmtest_license_checker.js":"/* istanbul instrument in package npmtest_license_checker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_license_checker = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_license_checker = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-license-checker/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-license-checker && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_license_checker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_license_checker\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_license_checker.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_license_checker.rollup.js'] =\n            local.assetsDict['/assets.npmtest_license_checker.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_license_checker.__dirname + '/lib.npmtest_license_checker.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-license-checker/node_modules/license-checker/lib/index.js":"/*\nCopyright (c) 2013, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttp://yuilibrary.com/license/\n*/\n\nvar UNKNOWN = 'UNKNOWN';\nvar fs = require('fs');\nvar path = require('path');\nvar read = require('read-installed');\nvar chalk = require('chalk');\nvar treeify = require('treeify');\nvar license = require('./license');\nvar debug = require('debug');\nvar mkdirp = require('mkdirp');\n\n// Set up debug logging\n// https://www.npmjs.com/package/debug#stderr-vs-stdout\nvar debugError = debug('license-checker:error');\nvar debugLog = debug('license-checker:log');\ndebugLog.log = console.log.bind(console);\n\nvar flatten = function(options) {\n    var moduleInfo = { licenses: UNKNOWN },\n        json = options.deps,\n        data = options.data,\n        key = json.name + '@' + json.version,\n        colorize = options.color,\n        unknown = options.unknown,\n        readmeFile,\n        licenseData, dirFiles, files = [], noticeFiles = [], licenseFile;\n\n    /*istanbul ignore next*/\n    if (colorize) {\n        moduleInfo = { licenses: chalk.bold.red(UNKNOWN) };\n        key = chalk.blue(json.name) + chalk.dim('@') + chalk.green(json.version);\n    }\n\n\n    // If we have processed this key already, just return the data object.\n    // This was added so that we don't recurse forever if there was a circular\n    // dependency in the dependency tree.\n    /*istanbul ignore next*/\n    if (data[key]) {\n        return data;\n    }\n\n    if ((options.production && json.extraneous) || (options.development && !json.extraneous && !json.root)) {\n        return data;\n    }\n\n    data[key] = moduleInfo;\n\n    if (json.repository) {\n        /*istanbul ignore else*/\n        if (typeof json.repository === 'object' && typeof json.repository.url === 'string') {\n            moduleInfo.repository = json.repository.url.replace('git+ssh://git@', 'git://').replace('.git', '');\n            moduleInfo.repository = moduleInfo.repository.replace('git+https://github.com', 'https://github.com').replace('.git', '');\n            moduleInfo.repository = moduleInfo.repository.replace('git://github.com', 'https://github.com').replace('.git', '');\n            moduleInfo.repository = moduleInfo.repository.replace('git@github.com:', 'https://github.com/').replace('.git', '');\n        }\n    }\n    if (json.url) {\n        /*istanbul ignore next*/\n        if (typeof json.url === 'object') {\n            moduleInfo.url = json.url.web;\n        }\n    }\n    if (json.author && typeof json.author === 'object') {\n        /*istanbul ignore else - This should always be there*/\n        if (json.author.name) {\n            moduleInfo.publisher = json.author.name;\n        }\n        if (json.author.email) {\n            moduleInfo.email = json.author.email;\n        }\n        if (json.author.url) {\n            moduleInfo.url = json.author.url;\n        }\n    }\n\n    /*istanbul ignore next*/\n    if (unknown) {\n        moduleInfo.dependencyPath = json.path;\n    }\n\n    /*istanbul ignore next*/\n    if (options.customFormat) {\n        Object.keys(options.customFormat).forEach(function forEachCallback(item) {\n            if (json[item]) {\n                //For now, we only support strings, not JSON objects\n                if (typeof json[item] === 'string') {\n                    moduleInfo[item] = json[item];\n                }\n            } else {\n                moduleInfo[item] = options.customFormat[item];\n            }\n        });\n    }\n\n    licenseData = json.license || json.licenses || undefined;\n\n    if (json.path && (!json.readme || json.readme.toLowerCase().indexOf('no readme data found') > -1)) {\n        readmeFile = path.join(json.path, 'README.md');\n        if (fs.existsSync(readmeFile)) {\n            json.readme = fs.readFileSync(readmeFile, 'utf8').toString();\n        }\n    }\n\n    if (licenseData) {\n        /*istanbul ignore else*/\n        if (Array.isArray(licenseData) && licenseData.length > 0) {\n            moduleInfo.licenses = licenseData.map(function(license){\n                /*istanbul ignore else*/\n                if (typeof license === 'object') {\n                    /*istanbul ignore next*/\n                    return license.type || license.name;\n                } else if (typeof license === 'string') {\n                    return license;\n                }\n            });\n        } else if (typeof licenseData === 'object' && (licenseData.type || licenseData.name)) {\n            moduleInfo.licenses = licenseData.type || licenseData.name;\n        } else if (typeof licenseData === 'string') {\n            moduleInfo.licenses = licenseData;\n        }\n    } else if (license(json.readme)) {\n        moduleInfo.licenses = license(json.readme);\n    }\n\n    if (Array.isArray(moduleInfo.licenses)) {\n        /*istanbul ignore else*/\n        if (moduleInfo.licenses.length === 1) {\n            moduleInfo.licenses = moduleInfo.licenses[0];\n        }\n    }\n\n    /*istanbul ignore else*/\n    if (json.path && fs.existsSync(json.path)) {\n        dirFiles = fs.readdirSync(json.path);\n        files = dirFiles.filter(function(filename) {\n            filename = filename.toUpperCase();\n            var name = path.basename(filename).replace(path.extname(filename), '');\n            return name === 'LICENSE' || name === 'LICENCE' || name === 'COPYING';\n        });\n        noticeFiles = dirFiles.filter(function(filename) {\n            filename = filename.toUpperCase();\n            var name = path.basename(filename).replace(path.extname(filename), '');\n            return name === 'NOTICE';\n        });\n    }\n\n    files.forEach(function(filename) {\n        licenseFile = path.join(json.path, filename);\n        // Checking that the file is in fact a normal file and not a directory for example.\n        /*istanbul ignore else*/\n        if (fs.lstatSync(licenseFile).isFile()) {\n            var content;\n            if (!moduleInfo.licenses || moduleInfo.licenses.indexOf(UNKNOWN) > -1) {\n                //Only re-check the license if we didn't get it from elsewhere\n                content = fs.readFileSync(licenseFile, {encoding: 'utf8'});\n                moduleInfo.licenses = license(content);\n            }\n            moduleInfo.licenseFile = options.basePath ? path.relative(options.basePath, licenseFile) : licenseFile;\n            if (!content) {\n                content = fs.readFileSync(moduleInfo.licenseFile, {encoding: 'utf8'});\n            }\n            if (options.customFormat) {\n                moduleInfo.licenseText = content.replace(/\"/g, '\\'').replace(/\\r?\\n|\\r/g, \" \").trim();\n            }\n        }\n    });\n\n    noticeFiles.forEach(function(filename) {\n        var file = path.join(json.path, filename);\n        /*istanbul ignore else*/\n        if (fs.lstatSync(file).isFile()) {\n            moduleInfo.noticeFile = options.basePath ? path.relative(options.basePath, file) : file;\n        }\n    });\n\n    /*istanbul ignore else*/\n    if (json.dependencies) {\n        Object.keys(json.dependencies).forEach(function(name) {\n            var childDependency = json.dependencies[name],\n            dependencyId = childDependency.name + '@' + childDependency.version;\n            if (data[dependencyId]) { // already exists\n                return;\n            }\n            data = flatten({\n                deps: childDependency,\n                data: data,\n                color: colorize,\n                unknown: unknown,\n                customFormat: options.customFormat,\n                production: options.production,\n                development: options.development,\n                basePath: options.basePath\n            });\n        });\n    }\n    if (!json.name || !json.version) {\n        delete data[key];\n    }\n    return data;\n};\n\nexports.init = function(options, callback) {\n    debugLog('scanning %s', options.start);\n\n    if (options.customPath) {\n        options.customFormat = this.parseJson(options.customPath);\n    }\n    var opts = {\n        dev: true,\n        log: debugLog\n    };\n\n    if (options.production || options.development) {\n        opts.dev = false;\n    }\n\n    read(options.start, opts, function(err, json) {\n        var data = flatten({\n                deps: json,\n                data: {},\n                color: options.color,\n                unknown: options.unknown,\n                customFormat: options.customFormat,\n                production: options.production,\n                development: options.development,\n                basePath: options.relativeLicensePath ? json.path : null\n            }),\n            colorize = options.color,\n            sorted = {},\n            filtered = {},\n            exclude = options.exclude && options.exclude.match(/([^\\\\\\][^,]|\\\\,)+/g).map(function(license) {\n                return license.replace(/\\\\,/g, ',').replace(/^\\s+|\\s+$/g, '');\n            }),\n            inputError = null;\n\n        Object.keys(data).sort().forEach(function(item) {\n            if (!data[item].licenses) {\n                /*istanbul ignore next*/\n                if (colorize) {\n                    data[item].licenses = chalk.bold.red(UNKNOWN);\n                } else {\n                    data[item].licenses = UNKNOWN;\n                }\n            }\n            if (options.unknown) {\n                if (data[item].licenses && data[item].licenses !== UNKNOWN) {\n                    if (data[item].licenses.indexOf('*') > -1) {\n                        /*istanbul ignore if*/\n                        if (colorize) {\n                            data[item].licenses = chalk.bold.red(UNKNOWN);\n                        } else {\n                            data[item].licenses = UNKNOWN;\n                        }\n                    }\n                }\n            }\n            /*istanbul ignore else*/\n            if (data[item]) {\n                if (options.onlyunknown) {\n                    if (data[item].licenses.indexOf('*') > -1 ||\n                        data[item].licenses.indexOf('UNKNOWN') > -1) {\n                        sorted[item] = data[item];\n                    }\n                } else {\n                    sorted[item] = data[item];\n                }\n            }\n        });\n        if (exclude) {\n            Object.keys(sorted).forEach(function(item) {\n                if (!(sorted[item].licenses && exclude.indexOf(sorted[item].licenses) !== -1)) {\n                    filtered[item] = sorted[item];\n                }\n            });\n        } else {\n            filtered = sorted;\n        }\n\n        if (!Object.keys(sorted).length) {\n            err = new Error('No packages found in this path..');\n        }\n\n        /*istanbul ignore next*/\n        if (err) {\n            debugError(err);\n            inputError = err;\n        }\n\n        //Return the callback and variables nicely\n        callback(inputError, filtered);\n    });\n};\n\nexports.print = function(sorted) {\n    console.log(exports.asTree(sorted));\n};\n\nexports.asTree = function(sorted) {\n    return treeify.asTree(sorted, true);\n};\n\nexports.asCSV = function(sorted, customFormat, csvComponentPrefix) {\n    var text = [ ], textArr = [ ], lineArr = [ ];\n    var prefixName = '\"component\"';\n    var prefix = csvComponentPrefix;\n\n    if (customFormat && Object.keys(customFormat).length > 0) {\n        textArr = [ ];\n        if (csvComponentPrefix) { textArr.push(prefixName); }\n        textArr.push('\"module name\"');\n        Object.keys(customFormat).forEach(function forEachCallback(item) {\n            textArr.push('\"' + item + '\"');\n        });\n        text.push(textArr.join(','));\n    } else {\n        textArr = [];\n        if (csvComponentPrefix) { textArr.push(prefixName); }\n        ['\"module name\"','\"license\"','\"repository\"'].forEach(function(item) {\n            textArr.push(item);\n        });\n        text.push(textArr.join(','));        \n    }\n\n    Object.keys(sorted).forEach(function(key) {\n        var module = sorted[key],\n        line = '';\n        lineArr = [ ];\n\n        //Grab the custom keys from the custom format\n        if (customFormat && Object.keys(customFormat).length > 0) {\n            if (csvComponentPrefix) {\n                lineArr.push('\"'+prefix+'\"');\n            }            \n            lineArr.push('\"' + key + '\"');\n            Object.keys(customFormat).forEach(function forEachCallback(item) {\n                lineArr.push('\"' + module[item] + '\"');\n            });\n            line = lineArr.join(',');\n        } else {\n            if (csvComponentPrefix) {\n                lineArr.push('\"'+prefix+'\"');\n            }\n            lineArr.push([\n                '\"' + key + '\"',\n                '\"' + (module.licenses || '') + '\"',\n                '\"' + (module.repository || '') + '\"'\n            ]);\n            line = lineArr.join(',');\n        }\n        text.push(line);\n    });\n\n    return text.join('\\n');\n};\n\n/**\n* Exports data as markdown (*.md) file which has it's own syntax.\n* @method\n* @param  {JSON} sorted       The sorted JSON data from all packages.\n* @param  {JSON} customFormat The custom format with information about the needed keys.\n* @return {String}            The returning plain text.\n*/\nexports.asMarkDown = function(sorted, customFormat) {\n\n    var text = [];\n    if (customFormat && Object.keys(customFormat).length > 0) {\n        Object.keys(sorted).forEach(function sortedCallback(sortedItem) {\n            text.push(' - **[' + sortedItem + '](' + sorted[sortedItem].repository + ')**');\n            Object.keys(customFormat).forEach(function customCallback(customItem) {\n                text.push('    - ' +  customItem + ': ' + sorted[sortedItem][customItem]);\n            });\n        });\n        text = text.join('\\n');\n    } else {\n        Object.keys(sorted).forEach(function(key) {\n            var module = sorted[key];\n            text.push('[' + key + '](' + module.repository + ') - ' + module.licenses);\n        });\n        text = text.join('\\n');\n    }\n\n    return text;\n};\n\nexports.parseJson = function(jsonPath) {\n    if (typeof jsonPath !== 'string') {\n        return new Error('did not specify a path');\n    }\n\n    var jsonFileContents = '',\n        result = { };\n\n    try {\n        jsonFileContents = fs.readFileSync(jsonPath, {encoding: 'utf8'});\n        result = JSON.parse(jsonFileContents);\n    } catch (err) {\n        result = err;\n    } finally {\n      return result;\n    }\n};\n\nexports.asFiles = function(json, outDir) {\n    mkdirp.sync(outDir);\n    Object.keys(json).forEach(function (moduleName) {\n        var licenseFile = json[moduleName].licenseFile,\n            fileContents, outFileName, outPath;\n\n        if (licenseFile && fs.existsSync(licenseFile)) {\n            fileContents = fs.readFileSync(licenseFile);\n            outFileName = chalk.stripColor(moduleName).replace(/(\\s+|@)/g, \"\") + \"-LICENSE.txt\";\n            outPath = path.join(outDir, outFileName);\n            fs.writeFileSync(outPath, fileContents, \"utf8\");\n        } else {\n            console.warn(\"no license file found for: \" + moduleName);\n        }\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-license-checker/node_modules/license-checker/lib/license.js":"var MIT_LICENSE = /ermission is hereby granted, free of charge, to any/;\nvar BSD_LICENSE = /edistribution and use in source and binary forms, with or withou/;\nvar BSD_SOURCE_CODE_LICENSE = /edistribution and use of this software in source and binary forms, with or withou/;\nvar WTFPL_LICENSE = /DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE/;\nvar ISC_LICENSE = /The ISC License/;\nvar MIT = /MIT\\b/;\nvar BSD = /BSD\\b/;\nvar ISC = /ISC\\b/;\nvar APACHE = /Apache License\\b/;\nvar WTFPL = /WTFPL\\b/;\n// https://creativecommons.org/publicdomain/zero/1.0/\nvar CC0_1_0 = /The\\s+person\\s+who\\s+associated\\s+a\\s+work\\s+with\\s+this\\s+deed\\s+has\\s+dedicated\\s+the\\s+work\\s+to\\s+the\\s+public\\s+domain\\s+by\\s+waiving\\s+all\\s+of\\s+his\\s+or\\s+her\\s+rights\\s+to\\s+the\\s+work\\s+worldwide\\s+under\\s+copyright\\s+law,\\s+including\\s+all\\s+related\\s+and\\s+neighboring\\s+rights,\\s+to\\s+the\\s+extent\\s+allowed\\s+by\\s+law.\\s+You\\s+can\\s+copy,\\s+modify,\\s+distribute\\s+and\\s+perform\\s+the\\s+work,\\s+even\\s+for\\s+commercial\\s+purposes,\\s+all\\s+without\\s+asking\\s+permission./i; // jshint ignore:line\n\n\nmodule.exports = function(str) {\n    if (str) {\n        str = str.replace('\\n', '');\n    }\n    if (typeof str === 'undefined' || !str) {\n        return 'Undefined';\n    } else if (ISC_LICENSE.test(str)) {\n        return 'ISC*';\n    } else if (MIT_LICENSE.test(str)) {\n        return 'MIT*';\n    } else if (BSD_LICENSE.test(str)) {\n        return 'BSD*';\n    } else if (BSD_SOURCE_CODE_LICENSE.test(str)) {\n        // https://spdx.org/licenses/BSD-Source-Code.html\n        return 'BSD-Source-Code*';\n    } else if (WTFPL_LICENSE.test(str)) {\n        return 'WTFPL*';\n    } else if (ISC.test(str)) {\n        return 'ISC*';\n    } else if (MIT.test(str)) {\n        return 'MIT*';\n    } else if (BSD.test(str)) {\n        return 'BSD*';\n    } else if (WTFPL.test(str)) {\n        return 'WTFPL*';\n    } else if (APACHE.test(str)) {\n        return 'Apache*';\n    } else if (CC0_1_0.test(str)) {\n        return 'CC0-1.0*';\n    }\n    return null;\n};\n","/home/travis/build/npmtest/node-npmtest-license-checker/node_modules/license-checker/lib/args.js":"/*\nCopyright (c) 2013, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttp://yuilibrary.com/license/\n*/\n\nvar nopt = require('nopt'),\n    chalk = require('chalk'),\n    known = {\n        production: Boolean,\n        development: Boolean,\n        json: Boolean,\n        csv: Boolean,\n        csvComponentPrefix: String,\n        markdown: Boolean,\n        out: require('path'),\n        unknown: Boolean,\n        onlyunknown: Boolean,\n        version: Boolean,\n        color: Boolean,\n        start: String,\n        help: Boolean,\n        relativeLicensePath: Boolean,\n        exclude: String,\n        customPath: require('path'),\n        customFormat: { },\n        files: require('path')\n    },\n    shorts = {\n        \"v\" : [\"--version\"],\n        \"h\" : [\"--help\"]\n    };\n\nvar raw = function (args) {\n    return nopt(known, shorts, (args || process.argv));\n};\n\n/*istanbul ignore next */\nvar has = function (a) {\n    var cooked = raw().argv.cooked,\n    ret = false;\n\n    cooked.forEach(function (o) {\n        if ((o === '--' + a) || (o === '--no-' + a)) {\n            ret = true;\n        }\n    });\n\n    return ret;\n};\n\nvar clean = function(args) {\n    var parsed = raw(args);\n    delete parsed.argv;\n    return parsed;\n};\n\nvar setDefaults = function(parsed) {\n    if (parsed === undefined) {\n        parsed = clean();\n    }\n    /*istanbul ignore else*/\n    if (parsed.color === undefined) {\n        parsed.color = chalk.supportsColor;\n    }\n    if (parsed.json || parsed.markdown || parsed.csv) {\n        parsed.color = false;\n    }\n    parsed.start = parsed.start || process.cwd();\n    parsed.relativeLicensePath = !!parsed.relativeLicensePath;\n\n    return parsed;\n};\n\nvar parse = function (args) {\n    var parsed = clean(args);\n    return setDefaults(parsed);\n};\n\nexports.defaults = setDefaults;\nexports.has = has;\nexports.raw = raw;\nexports.parse = parse;\nexports.shorts = shorts;\nexports.known = known;\n","/home/travis/build/npmtest/node-npmtest-license-checker/node_modules/license-checker/lib/stack.js":"/*\nCopyright (c) 2012, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttp://yuilibrary.com/license/\n*/\nvar Stack = function () {\n    this.errors   = [];\n    this.finished = 0;\n    this.results  = [];\n    this.total    = 0;\n};\n\nStack.prototype = {\n    add: function (fn) {\n        var self  = this,\n            index = self.total;\n\n        self.total += 1;\n\n        return function (err) {\n            if (err) { self.errors[index] = err; }\n\n            self.finished += 1;\n            self.results[index] = fn.apply(null, arguments);\n            self.test();\n        };\n    },\n\n    test: function () {\n        if (this.finished >= this.total && this.callback) {\n            this.callback.call(null, this.errors.length ? this.errors : null,\n                    this.results, this.data);\n        }\n    },\n\n    done: function (callback, data) {\n        this.callback = callback;\n        this.data     = data;\n        this.test();\n    }\n};\n\nexports.Stack = Stack;\n","/home/travis/build/npmtest/node-npmtest-license-checker/node_modules/license-checker/scripts/contrib.js":"#!/usr/bin/env node\n\nvar join = require('path').join;\nvar format = require('format-package-json');\nvar GitContributors = require('git-contributors').GitContributors;\nvar opts = join(__dirname, '../');\nvar pkg = join(__dirname, '../package.json');\nvar json = require(pkg);\n \njson.contributors = []; //clear it\n\nGitContributors.list(opts, function (err, result) {\n    result.forEach(function(item) {\n        json.contributors.push([item.name, '<' + item.email + '>'].join(' '));\n    });\n    json.contributors.sort();\n    format(pkg, json, function() {\n        console.log('Wrote %s contributors to: %s', result.length, pkg);\n    });\n});\n\n\n\n\n"}